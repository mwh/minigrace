#!/bin/bash

set -e

if [ $# -lt 3 ]
then
    echo "Error: harness requires three arguments" >&2
    echo "- Grace command" >&2
    echo "- Directory of tests to run" >&2
    echo "- Command to execute compiled code (empty for native)" >&2
fi
GRACE="$1"
TESTDIR="$2"
EXECUTOR="$3"
shift
shift
shift
cd "$TESTDIR"

TYPE="normal"

# somewhat hacky way to make the tograce target work without too many changes
if [ "$EXECUTOR" ]
then
    if [ "$EXECUTOR" = "tograce" ]
    then
        EXECUTOR="./"
        TYPE="tograce"
    elif [ "$EXECUTOR" = "repl" ]
    then
        EXECUTOR="./"
        TYPE="repl"
    else
        EXECUTOR="$EXECUTOR "
    fi
else
    EXECUTOR="./"
fi

if [ $# -gt 0 ]
then
    tests=( "$@" )
else
    tests=( *_test.grace )
fi

set +e

pass() {
    echo "!PASS" >> test-$$.log
}
fail() {
    echo "!FAIL $*" >> test-$$.log
}

NUM_TESTS=0
NUM_PASS=0
NUM_UNEXPECTED_SUCCESS=0
NUM_WRONG_OUTPUT=0
NUM_COMPILE_ERROR=0
echo "Beginning test run at $(date)" > test.log
for tcase in "${tests[@]}"
do
    if ! [ -e "$tcase" ]
    then
        tcase=$(echo $tcase*_test.grace)
    fi
    if [ "$TYPE" = "tograce" ]
    then
        # hack to allow tests that test for compilation failure
        if ! $GRACE --target grace $tcase > tg_$tcase 2>/dev/null
        then
            if echo $tcase | grep -q _fail
            then
                cp $tcase tg_$tcase
            else
                echo "print \"failed to print\"" > tg_$tcase
            fi
        else
            if [ -e "${tcase%_test.grace}.out" ]
            then
                cp ${tcase%_test.grace}.out tg_${tcase%_test.grace}.out
            fi
        fi
        tcase=tg_$tcase
    fi
    echo ================================================== >> test-$$.log
    echo Beginning case "$tcase"... >>test-$$.log
    NUM_TESTS=$((NUM_TESTS + 1))
    if [ "${tcase%fail_test.grace}" = "$tcase" ]
    then
        if [ "$TYPE" = "repl" ]
        then
            COMMAND="cat $tcase | $GRACE --interactive"
        else
            COMMAND="$GRACE --make --native $tcase"
        fi
        if eval "$COMMAND" > test-$$.log 2>&1
        then
            if [ "$TYPE" = "repl" ]
            then
                cat $tcase | $GRACE --interactive > test-$$.out
            else
                execname="${tcase%%.*}"
                $EXECUTOR"$execname" > test-$$.out
            fi
            if diff test-$$.out ${tcase%_test.grace}.out
            then
                NUM_PASS=$((NUM_PASS + 1))
                echo "${NUM_TESTS} PASS: $tcase"
                pass
                rm -f test-$$.out
            else
                NUM_WRONG_OUTPUT=$((NUM_WRONG_OUTPUT + 1))
                echo "${NUM_TESTS} ERROR: $tcase produced wrong output"
                fail "wrong output"
            fi
        else
            NUM_COMPILE_ERROR=$((NUM_COMPILE_ERROR + 1))
            echo "${NUM_TESTS} ERROR: $tcase failed to compile"
            fail "compile error"
        fi
    else
        if [ "$TYPE" = "repl" ]
        then
            COMMAND="cat $tcase | $GRACE --interactive"
        else
            COMMAND="$GRACE --make --native $tcase"
        fi
        if eval "$COMMAND" > test-$$.log 2>&1
        then
            echo "${NUM_TESTS} ERROR: $tcase should have failed to compile"
            NUM_UNEXPECTED_SUCCESS=$((NUM_UNEXPECTED_SUCCESS + 1))
            fail "compiled"
        else
            NUM_PASS=$((NUM_PASS + 1))
            echo "${NUM_TESTS} PASS: $tcase"
            pass
        fi
    fi
    cat test-$$.log >> test.log
    if [ -e test-$$.out ]
    then
        echo "Got output:" >> test.log
        cat test-$$.out >> test.log
        echo "Expected output:" >> test.log
        cat ${tcase%_test.grace}.out >> test.log
    fi
    rm -f test-$$.log test-$$.out ${tcase%%.*} *.bc *.ll *.gco *.s *.gcn *.c *.java *.class *.gct
    if [ "$TYPE" = "tograce" ]
    then
        rm -f tg_t*
    fi
done

echo Ran $NUM_TESTS tests.
echo $NUM_PASS/$NUM_TESTS passed.
echo "$NUM_UNEXPECTED_SUCCESS tests compiled that shouldn't have."
echo "$NUM_WRONG_OUTPUT tests compiled but produced the wrong output."
echo "$NUM_COMPILE_ERROR tests did not compile but should have."
NUM_FAIL=$((NUM_TESTS - NUM_PASS))
if [ $NUM_FAIL -gt 0 ]
then
    exit 1
fi
