If you want to make changes to Minigrace and have them incorporated
upstream, you should read this document in full.

Making changes
--------------
Minigrace uses the Git version control system (<http://git-scm.com>). To
have your changes incorporated upstream you should work against the
latest master branch of <https://github.com/mwh/minigrace.git>.

To build the compiler including your changes, follow the standard
instructions in <doc/build>. These will cause the build system to
rebuild the compiler with itself multiple times to ensure that it is
functional.

If you are making modifications to the C code generation or run-time
library, it is possible that your changes cause the compiler to begin
segfaulting during build and reverting your changes does not fix it. In
this case, undo the change and run `make clean` and then `make` again.

If you are working on the JavaScript backend you will probably find that
you need to perform a hard reload (commonly shift-reload) in your
browser to cause it to pick up the new versions of files. If your
modifications are only to js/gracelib.js you do not need to `make js`
after changes, but editing any .grace or .in.html always requires
rebuilding. In order to run the tests or load the samples in the user
interface the UI must be accessed over HTTP. Most browsers will not
permit loading them from file://.

Configuring Git
---------------
Git should be configured with your name and email address. Use
  git config --global user.name "Your Name"
  git config --global user.email "you@example.com"
to set these before making any commits.

Additional documentation for Git can be found on the Git website:
<http://git-scm.com/documentation>. <https://help.github.com/> also
includes some helpful "getting started" documentation.

Preparing a branch for integration
----------------------------------
Commits should be logical and self-contained. The subject (first line)
of the commit message should be no longer than 50 characters. Further
explanation should follow a blank line and be wrapped at no more than 72
characters. The subject should be an imperative statement summarising
the content and purpose of the commit, and should not end with
punctuation. Unrelated changes should be in separate commits.

Eventually you will have a completed discrete change to the compiler you
want to integrate. At this point please ensure that the branch is
fast-forward from the upstream master (that is, the tip of upstream
master is a direct ancestor of the tip of the branch to be merged). You
may find the rebase command to be useful here: see `git help rebase`. Do
not include merge commits in this branch.

When you have a complete branch ready for integration please ensure that
the compiler builds from the beginning and the test suite passes. If
your changes are to the JavaScript backend or runtime library, please
ensure that the tests succeed in the JavaScript user interface as well.

Submitting changes
------------------
To submit changes for inclusion, publish the branch containing them
somewhere publicly accessible and inform the maintainer of its location,
the branch you want to merge, and what it is you want to integrate. You
may place this branch anywhere that is generally accessible; a number of
special-purpose Git hosting services exist, which are listed on
<https://git.wiki.kernel.org/index.php/GitHosting>. Any of these
services are suitable for hosting your repository. Documentation on how
to use each service is provided on their websites.

Alternatively, you can also publish the branch into any HTTP-accessible
webspace. In that case, run `git update-server-info` inside the
repository directory to generate files required to let Git find what it
needs. You can either copy the repository using an ordinary filesystem
copy or publish it using `git push` and a configured remote (see `git
help remote`).

If none of the above options are available to you for some reason, `git
format-patch name-of-upstream/master` will generate patch files from the
commits, including their metadata, which can then be sent in for
inclusion. `git send-email`, when configured correctly, will
automatically generate and email these patches. Instructions for using
these commands are included in the Git documentation.

Revising changes
----------------
If your commits do not meet these requirements or there are design
issues, merge conflicts, or bugs found during the integration process
you may be asked to correct them and resubmit. In this case, `git rebase
--interactive` is likely to be a useful tool. See `git help rebase` for
details on how to use this tool. After making the requested changes you
can follow the above steps again to publish the new branch.
