Minigrace supports most of the specified dynamically-typed language, and
a static structural type-checker. It does not yet support:
- Overriding the if-then-else construct: only the built-in construct may
  begin with "if()". for()do and while()do can be used as any ordinary
  method.

Some functionality is incomplete:
- Runtime type checks use only method names and not any other type
  information. This applies both to pattern-matching and to gradual
  checks at method boundaries.
- Numeric literals in non-decimal bases may only be integral.
- Interpolated code inside string literals may not contain a right brace
  in any context.
- Visibility annotations are checked only dynamically, not statically
- The static typechecker is currently disabled. Types and generic
  parameters are supported at runtime. The expected behaviour of
  generics is described in <doc/generics>.

The compiler also supports the following extensions used internally,
which are not part of the language and are subject to change:
- Lists, constructed with [] and supporting indexing with [] and []:=
  and methods size, push, pop, first, last, and indices.
- Methods defined in the prelude can always be accessed through the
  implicitly-bound "prelude" object.
- Character codes for length-one strings can be obtained with the "ord"
  method.
- Access to the filesystem through the io module. io contains these
  methods:
  * input returning a file object for standard input
  * output returning a file object for standard output
  * error returning a file object for standard error
  * open(path, modestr) returning a file object for path
  * system(command) executing command as a subprocess, returning true
    if the command exited successfully and false otherwise
  * spawn(*cmd) executes cmd as a possibly-asynchronous subprocess,
    returning a Process object
  * exists(path) returning true if the given path exists
  * newer(x, y) returning true if x is newer than y
  File objects have these methods:
  * read returns the contents of the file as a string
  * write writes the given string to the file
  * seek seeks to the given position
  * eof is true if the file is at EOF
  * File objects are also iterable by character
  Process objects have these methods:
  * wait returns the exit code when the subprocess terminates
  * status returns the exit code
  * success returns true if the process exited 0
  * terminated returns true if the process has terminated
- if-then-elseif-elseif-...-else with the standard C-like syntax
- Setting the default visibility of everything in a file with the
  option -XDefaultVisibility=public|confidential. Three more specific
  options are also available: DefaultDefVisibility,
  DefaultVarVisibility, and DefaultMethodVisibility. All of these may
  also be specified after "#pragma " at the top of a file.

Certain environment variables affect the behaviour of running Grace
programs:
- GRACE_STACK sets the allocated stack size (default 1024).
- GRACE_STATS causes various runtime statistics to be printed to
  standard error when the program terminates, if set.
- GRACE_GC_DISABLE prevents garbage collection, if set.
- GRACE_MODULE_PATH is used to find dynamic modules.
- GRACE_DEBUGGER will cause the program to drop to an interactive
  debugger when a fatal error occurs.

